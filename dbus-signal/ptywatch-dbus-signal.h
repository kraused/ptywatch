/*
 * Generated by gdbus-codegen 2.46.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __PTYWATCH_DBUS_SIGNAL_H__
#define __PTYWATCH_DBUS_SIGNAL_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.PtyWatchDbusSignal */

#define TYPE_PTY_WATCH_DBUS_SIGNAL (pty_watch_dbus_signal_get_type ())
#define PTY_WATCH_DBUS_SIGNAL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PTY_WATCH_DBUS_SIGNAL, PtyWatchDbusSignal))
#define IS_PTY_WATCH_DBUS_SIGNAL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PTY_WATCH_DBUS_SIGNAL))
#define PTY_WATCH_DBUS_SIGNAL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PTY_WATCH_DBUS_SIGNAL, PtyWatchDbusSignalIface))

struct _PtyWatchDbusSignal;
typedef struct _PtyWatchDbusSignal PtyWatchDbusSignal;
typedef struct _PtyWatchDbusSignalIface PtyWatchDbusSignalIface;

struct _PtyWatchDbusSignalIface
{
  GTypeInterface parent_iface;

  void (*message) (
    PtyWatchDbusSignal *object,
    const gchar *arg_summary,
    const gchar *arg_body);

};

GType pty_watch_dbus_signal_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *pty_watch_dbus_signal_interface_info (void);
guint pty_watch_dbus_signal_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void pty_watch_dbus_signal_emit_message (
    PtyWatchDbusSignal *object,
    const gchar *arg_summary,
    const gchar *arg_body);



/* ---- */

#define TYPE_PTY_WATCH_DBUS_SIGNAL_PROXY (pty_watch_dbus_signal_proxy_get_type ())
#define PTY_WATCH_DBUS_SIGNAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PTY_WATCH_DBUS_SIGNAL_PROXY, PtyWatchDbusSignalProxy))
#define PTY_WATCH_DBUS_SIGNAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PTY_WATCH_DBUS_SIGNAL_PROXY, PtyWatchDbusSignalProxyClass))
#define PTY_WATCH_DBUS_SIGNAL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PTY_WATCH_DBUS_SIGNAL_PROXY, PtyWatchDbusSignalProxyClass))
#define IS_PTY_WATCH_DBUS_SIGNAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PTY_WATCH_DBUS_SIGNAL_PROXY))
#define IS_PTY_WATCH_DBUS_SIGNAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PTY_WATCH_DBUS_SIGNAL_PROXY))

typedef struct _PtyWatchDbusSignalProxy PtyWatchDbusSignalProxy;
typedef struct _PtyWatchDbusSignalProxyClass PtyWatchDbusSignalProxyClass;
typedef struct _PtyWatchDbusSignalProxyPrivate PtyWatchDbusSignalProxyPrivate;

struct _PtyWatchDbusSignalProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  PtyWatchDbusSignalProxyPrivate *priv;
};

struct _PtyWatchDbusSignalProxyClass
{
  GDBusProxyClass parent_class;
};

GType pty_watch_dbus_signal_proxy_get_type (void) G_GNUC_CONST;

void pty_watch_dbus_signal_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
PtyWatchDbusSignal *pty_watch_dbus_signal_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
PtyWatchDbusSignal *pty_watch_dbus_signal_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void pty_watch_dbus_signal_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
PtyWatchDbusSignal *pty_watch_dbus_signal_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
PtyWatchDbusSignal *pty_watch_dbus_signal_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_PTY_WATCH_DBUS_SIGNAL_SKELETON (pty_watch_dbus_signal_skeleton_get_type ())
#define PTY_WATCH_DBUS_SIGNAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PTY_WATCH_DBUS_SIGNAL_SKELETON, PtyWatchDbusSignalSkeleton))
#define PTY_WATCH_DBUS_SIGNAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PTY_WATCH_DBUS_SIGNAL_SKELETON, PtyWatchDbusSignalSkeletonClass))
#define PTY_WATCH_DBUS_SIGNAL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PTY_WATCH_DBUS_SIGNAL_SKELETON, PtyWatchDbusSignalSkeletonClass))
#define IS_PTY_WATCH_DBUS_SIGNAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PTY_WATCH_DBUS_SIGNAL_SKELETON))
#define IS_PTY_WATCH_DBUS_SIGNAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PTY_WATCH_DBUS_SIGNAL_SKELETON))

typedef struct _PtyWatchDbusSignalSkeleton PtyWatchDbusSignalSkeleton;
typedef struct _PtyWatchDbusSignalSkeletonClass PtyWatchDbusSignalSkeletonClass;
typedef struct _PtyWatchDbusSignalSkeletonPrivate PtyWatchDbusSignalSkeletonPrivate;

struct _PtyWatchDbusSignalSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  PtyWatchDbusSignalSkeletonPrivate *priv;
};

struct _PtyWatchDbusSignalSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType pty_watch_dbus_signal_skeleton_get_type (void) G_GNUC_CONST;

PtyWatchDbusSignal *pty_watch_dbus_signal_skeleton_new (void);


G_END_DECLS

#endif /* __PTYWATCH_DBUS_SIGNAL_H__ */
